esphome:
  name: "hot-water-cylinder"
  friendly_name: Hot Water Cylinder


esp32:
  board: esp32-s2-saola-1 # Standard ESP32-S2 Board
  #framework:
    #type: esp-idf # platformio doesn't seem to work very well for the S2 as of writing this.
    #type: arduino

# Enable logging
logger:
  level: DEBUG


# Enable Home Assistant API
api:


ota:
  password: !secret ota_password


wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password


uart:
  - tx_pin: GPIO16
    baud_rate: 115200
    id: relay_uart


switch:  
  - platform: template
    name: 'Set Temperature 2'
    id: setTemperature2
    icon: "mdi:electric-switch"
    turn_on_action:
      uart.write:
        data: [0xA0, 0x01, 0x01, 0xA2] # relay on / Output on NC
        id: relay_uart
    turn_off_action:
      uart.write:
        data: [0xA0, 0x01, 0x00, 0xA1] # relay off, Output on NC
        id: relay_uart
    optimistic: True
    inverted: True
    restore_mode: RESTORE_DEFAULT_ON


light:
  - platform: status_led
    name: "Status LED"
    pin: GPIO15


time:
  - platform: homeassistant
    id: deviceTime
    update_interval: 1h
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:

      - seconds: /15
        minutes: 0
        then:
        - lambda: |-
            struct tm deviceTimeTm;
            strptime(id(deviceTimeIso).state.c_str(), "%Y-%m-%dT%H:%M:%S%z", &deviceTimeTm);
            deviceTimeTm.tm_isdst = 0; // DST taken care of in deviceTimeIso
            time_t deviceTimeTime = mktime(&deviceTimeTm); // Normalse time after modification
            ESPTime deviceTimeEspTime = ESPTime::from_c_tm(&deviceTimeTm, deviceTimeTime);
            if ( std::round(float(deviceTimeEspTime.hour)) == std::round(float(id(runtimeCatchupEndHour).state)) ) {
            	id(runtimeMinutes) = 0;
            }
        - component.update: runtime

      - seconds: 0
        then:
        - lambda: |-
            // If we commanded temp2 or the heater is running, count.
            if ( id(setTemperature2).state || id(heating).state ) {
            	id(runtimeMinutes)+=1;
            }
        - component.update: runtime
        - script.execute: publishDeviceTime

sensor:
  # ADC attached to current clamp. 0V raised to 2.5v so full sine wave is observed.
  - platform: adc
    pin: GPIO10
    attenuation: 0db
    id: ct_clamp_adc
    accuracy_decimals: 6
    disabled_by_default: True
    internal: True

  # CT clamp provides RMS values from the ADC and can map to AC current use.
  - platform: ct_clamp
    sensor: ct_clamp_adc
    id: current
    unit_of_measurement: "A"
    sample_duration: 4800ms
    update_interval: 4800ms
    accuracy_decimals: 3
    filters:
      - calibrate_polynomial:
          degree: 3
          datapoints:
            - 0.00200 -> 0.00
            - 0.13656 -> 3.59
            - 0.19387 -> 5.28
            - 0.26127 -> 9.15
      - lambda: |-
          return (x >= 0.1) ? x : 0;
    on_value:
      then:
        sensor.template.publish:
          id: power
          state: !lambda 'return x * 230;'

  - platform: template
    name: "Power"
    id: power
    state_class: measurement
    unit_of_measurement: 'W'
    accuracy_decimals: 0

  - platform: total_daily_energy
    name: 'Energy'
    id: energy
    power_id: power
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: template
    name: "Runtime"
    id: runtime
    device_class: duration
    unit_of_measurement: min
    state_class: total
    lambda: |-
      return id(runtimeMinutes);
    on_value: 
      then:
        - component.update: runtimeRemaining

  - platform: template
    name: "Runtime Remaining"
    id: runtimeRemaining
    device_class: duration
    unit_of_measurement: min
    state_class: total
    lambda: |-
      int remaining = id(runtimeLimit).state - id(runtime).state;
      if (remaining < 0) {
        remaining = 0;
      }
      return remaining;
    on_value: 
      then:
        - script.execute: publishDeviceTime # Publish a caller to prevent collusions

text_sensor:

  - platform: template
    name: "Runtime End Time"
    id: runtimeEndTimeIso
    device_class: timestamp
  
  - platform: template
    name: "Runtime Start Time"
    id: runtimeStartTimeIso
    device_class: timestamp
  
  - platform: template
    name: "Device Time"
    id: deviceTimeIso
    device_class: timestamp

number:
  - platform: template
    name: "Runtime Limit"
    id: runtimeLimit
    unit_of_measurement: "min"  # Change the unit to minutes
    optimistic: true
    min_value: 0
    max_value: 1440
    step: 30
    restore_value: True
    initial_value: 480
    mode: SLIDER
    on_value: 
      then:
        - component.update: runtimeRemaining

  - platform: template
    name: "Runtime Catchup End Hour"
    id: runtimeCatchupEndHour
    unit_of_measurement: "hour"  # Change the unit to minutes
    optimistic: true
    min_value: 0
    max_value: 24
    step: 1
    restore_value: True
    initial_value: 7
    on_value: 
      then:
        - script.execute: publishDeviceTime # Publish a caler to prevent collusions
        

  - platform: template
    name: "Energy Limit"
    id: energy_limit
    unit_of_measurement: "kWh"  # Change the unit to minutes
    optimistic: true
    min_value: 0
    max_value: 20
    step: 1
    restore_value: True
    initial_value: 5
    mode: SLIDER

globals:
  - id: runtimeMinutes
    type: int
    restore_value: yes
    initial_value: '0'

binary_sensor:

  - platform: template
    name: "Runtime Reached"
    lambda: |-
      return (id(runtimeMinutes) >= id(runtimeLimit).state);

  - platform: template
    name: "Runtime Catchup Request"
    id: runtimeCatchupRequest
    lambda: |-
      int margin = id(runtimeCatchupRequest).state ? 10 : 0;

      struct tm deviceTimeTm;
      strptime(id(deviceTimeIso).state.c_str(), "%Y-%m-%dT%H:%M:%S%z", &deviceTimeTm);
      deviceTimeTm.tm_isdst = 0; // DST taken care of in deviceTimeIso
      deviceTimeTm.tm_sec += margin;
      time_t deviceTimeTime = mktime(&deviceTimeTm); // Normalse time after adding margin
      ESPTime deviceTimeEspTime = ESPTime::from_c_tm(&deviceTimeTm, deviceTimeTime);

      struct tm runtimeStartTimeTm;
      strptime(id(runtimeStartTimeIso).state.c_str(), "%Y-%m-%dT%H:%M:%S%z", &runtimeStartTimeTm);
      runtimeStartTimeTm.tm_isdst = 0; // DST taken care of in deviceTimeIso
      ESPTime runtimeStartTimeEspTime = ESPTime::from_c_tm(&runtimeStartTimeTm, mktime(&runtimeStartTimeTm));

      // If the current time has gone past the start time.
      return deviceTimeEspTime > runtimeStartTimeEspTime;

  - platform: template
    name: "Energy Reached"
    id: energy_reached
    lambda: |-
      return (id(energy).state > id(energy_limit).state);
  
  - platform: template
    name: "Heating"
    id: heating
    lambda: |-
      return (id(power).state > 200);
  
  - platform: template
    name: "Time Synchronised"
    id: timeSynchronised
    lambda: |-
      return id(deviceTime).now().is_valid();

script:

  - id: publishDeviceTime
    then:
      - lambda: |-
          id(deviceTimeIso).publish_state(id(deviceTime).now().strftime("%Y-%m-%dT%H:%M:%S%z"));
      - script.execute: publishRuntimeEndTime
  
  - id: publishRuntimeEndTime
    then:
      - lambda: |-
          struct tm deviceTimeTm;
          strptime(id(deviceTimeIso).state.c_str(), "%Y-%m-%dT%H:%M:%S%z", &deviceTimeTm);
          deviceTimeTm.tm_isdst = 0; // DST taken care of in deviceTimeIso
          ESPTime runtimeEndTimeEspTime = ESPTime::from_c_tm(&deviceTimeTm, mktime(&deviceTimeTm));

          if (runtimeEndTimeEspTime.hour >= id(runtimeCatchupEndHour).state) {
          	runtimeEndTimeEspTime.increment_day();
          }

          runtimeEndTimeEspTime.hour = id(runtimeCatchupEndHour).state;
          runtimeEndTimeEspTime.minute = 0;
          runtimeEndTimeEspTime.second = 0;

          id(runtimeEndTimeIso).publish_state(runtimeEndTimeEspTime.strftime("%Y-%m-%dT%H:%M:%S%z"));
      - script.execute: publishRuntimeStartTime

  
  - id: publishRuntimeStartTime
    then:
      - lambda: |-
          struct tm runtimeEndTimeTm;
          strptime(id(runtimeEndTimeIso).state.c_str(), "%Y-%m-%dT%H:%M:%S%z", &runtimeEndTimeTm);
          runtimeEndTimeTm.tm_isdst = 0; // DST taken care of in deviceTimeIso

          struct tm runtimeStartTimeTm;
          runtimeStartTimeTm = runtimeEndTimeTm;

          runtimeStartTimeTm.tm_min -= id(runtimeRemaining).state;

          time_t runtimeStartTimeTime = mktime(&runtimeStartTimeTm); // Normalise time
          ESPTime runtimeStartTimeEspTime = ESPTime::from_c_tm(&runtimeStartTimeTm, runtimeStartTimeTime);

          id(runtimeStartTimeIso).publish_state(runtimeStartTimeEspTime.strftime("%Y-%m-%dT%H:%M:%S%z"));


