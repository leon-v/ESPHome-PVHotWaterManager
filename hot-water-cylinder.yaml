esphome:
  name: "hot-water-cylinder"
  friendly_name: Hot Water Cylinder

esp32:
  board: esp32-s2-saola-1 # Standard ESP32-S2 Board
  framework:
    #type: esp-idf # platformio doesn't seem to work very well for the S2 as of writing this.
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

time:
  - platform: sntp
    id: device_time
    on_time_sync:
      then:
      - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: 0
        hours: 7
        then:
        - lambda: |-
            id(runtime_minutes) = 0;

light:
  - platform: status_led
    name: "Status LED"
    pin: GPIO15

sensor:

  # ADC attached to current clamp. 0V raised to 2.5v so full sine wave is observed.
  - platform: adc
    pin: GPIO10
    attenuation: 0db
    id: ct_clamp_adc
    accuracy_decimals: 6
    disabled_by_default: True
    internal: True

  # CT clamp provides RMS values from the ADC and can map to AC current use.
  - platform: ct_clamp
    sensor: ct_clamp_adc
    id: current
    unit_of_measurement: "A"
    sample_duration: 4800ms
    update_interval: 4800ms
    accuracy_decimals: 3
    filters:
      - calibrate_polynomial:
          degree: 3
          datapoints:
            - 0.00200 -> 0.00
            - 0.13656 -> 3.59
            - 0.19387 -> 5.28
            - 0.26127 -> 9.15
      - lambda: |-
          return (x >= 0.1) ? x : 0;
    on_value:
      then:
        sensor.template.publish:
          id: power
          state: !lambda 'return x * 230;'

  - platform: template
    name: "Power"
    id: power
    state_class: measurement
    unit_of_measurement: 'W'
    accuracy_decimals: 0

  - platform: total_daily_energy
    name: 'Energy'
    id: energy
    power_id: power
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: template
    name: "Runtime"
    id: runtime
    device_class: duration
    unit_of_measurement: min
    state_class: total
    update_interval: 60s
    lambda: |-
      if (id(set_temperature_2).state) id(runtime_minutes)+=1; return id(runtime_minutes);
    on_value: 
      then:
        - component.update: runtime_remaining

  - platform: template
    name: "Runtime Remaining"
    id: runtime_remaining
    device_class: duration
    unit_of_measurement: min
    state_class: total
    lambda: |-
      return (id(runtime_limit).state * 60) - id(runtime).state;
    on_value: 
      then:
        - component.update: runtime_catchup_time

  - platform: template
    name: "Runtime Catchup Time"
    id: runtime_catchup_time
    device_class: timestamp
    lambda: |-
      time_t currTime = id(device_time).now().timestamp;

      // Calculate the timestamp for 7:00 AM tomorrow
      struct tm* localTime = localtime(&currTime);
      struct tm modifiedTime = *localTime; // Make a copy

      modifiedTime.tm_hour = 7;
      modifiedTime.tm_min = 0;
      modifiedTime.tm_sec = 0;

      // If it's already past 7:00 AM today, add one day
      if (localTime->tm_hour >= 7) {
          modifiedTime.tm_mday += 1;
      }

      int remaining_runtime_minutes = id(runtime_remaining).state;

      if (remaining_runtime_minutes <= 0){
          remaining_runtime_minutes = 0;
      }

      modifiedTime.tm_min -= remaining_runtime_minutes;

      // Convert modified time back to timestamp
      time_t next7am = mktime(&modifiedTime);

      return next7am;


number:
  - platform: template
    name: "Runtime Limit"
    id: runtime_limit
    unit_of_measurement: "hour"  # Change the unit to minutes
    optimistic: true
    min_value: 0
    max_value: 48
    step: 1
    restore_value: True
    initial_value: 8
    mode: SLIDER
    on_value: 
      then:
        - component.update: runtime_remaining

  - platform: template
    name: "Energy Limit"
    id: energy_limit
    unit_of_measurement: "kWh"  # Change the unit to minutes
    optimistic: true
    min_value: 0
    max_value: 20
    step: 1
    restore_value: True
    initial_value: 5
    mode: SLIDER

globals:
  - id: runtime_minutes
    type: int
    restore_value: yes
    initial_value: '0'

binary_sensor:

  - platform: template
    name: "Runtime Reached"
    lambda: |-
      if (id(runtime_minutes) >= (id(runtime_limit).state) * 60) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Runtime Catchup Request"
    id: runtime_catchup_request
    lambda: |-
      return ( id(device_time).now().timestamp >= id(runtime_catchup_time).state);


  - platform: template
    name: "Energy Reached"
    id: energy_reached
    lambda: |-
      if (id(energy).state > id(energy_limit).state) {
        return true;
      } else {
        return false;
      }
  
  - platform: template
    name: "Heating"
    lambda: |-
      if (id(power).state > 50) {
        return true;
      } else {
        return false;
      }


uart:
  - tx_pin: GPIO16
    baud_rate: 115200
    id: relay_uart

switch:
  
  - platform: template
    name: 'Set Temperature 2'
    id: set_temperature_2
    icon: "mdi:electric-switch"
    turn_on_action:
      uart.write:
        data: [0xA0, 0x01, 0x01, 0xA2] # relay on / Output on NC
        id: relay_uart
    turn_off_action:
      uart.write:
        data: [0xA0, 0x01, 0x00, 0xA1] # relay off, Output on NC
        id: relay_uart
    optimistic: True
    inverted: True
    restore_mode: RESTORE_DEFAULT_ON
